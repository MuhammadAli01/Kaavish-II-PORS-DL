{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"retrieval","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"ZhSsDYSf2L20","colab_type":"code","outputId":"032d48da-4d0d-4071-c48c-a62b3371ed05","executionInfo":{"status":"ok","timestamp":1575963647577,"user_tz":-300,"elapsed":2684,"user":{"displayName":"Muhammad Ali","photoUrl":"","userId":"15673831022739340207"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hq3NELL52GAS","colab_type":"code","colab":{}},"source":["import os\n","os.chdir('/content/drive/My Drive/Deep Fashion Retrieval/deep-fashion-retrieval')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g_kqMH1oFvkK","colab_type":"code","outputId":"93b76a27-6a0a-4072-c03c-2b729f806601","executionInfo":{"status":"error","timestamp":1575963723151,"user_tz":-300,"elapsed":64179,"user":{"displayName":"Muhammad Ali","photoUrl":"","userId":"15673831022739340207"}},"colab":{"base_uri":"https://localhost:8080/","height":358}},"source":["from retrieval import *\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","\n","# example = \"img/Sheer_Pleated-Front_Blouse/img_00000005.jpg\"\n","example = \"img/Abstract-Patterned_Blouse/img_00000004.jpg\"\n","\n","extractor = load_test_model()\n","deep_feats, color_feats, labels = load_feat_db()\n","f = dump_single_feature(example, extractor)\n","# print(f)\n","\n","if any(list(map(lambda x: x is None, f))):\n","    print(\"Input feature is None\")\n","    exit()\n","\n","clf = load_kmeans_model()\n","\n","# result = naive_query(f, deep_feats, color_feats, labels, 5)\n","result_kmeans = kmeans_query(clf, f, deep_feats, color_feats, labels, 5)\n","\n","# print(\"Naive query result:\", result)\n","# print(\"K-Means query result:\", result_kmeans)\n","# visualize(example, result)\n","print(\"Query result:\", result_kmeans)\n","visualize(example, result_kmeans)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Loading model...\n","Loading model model_10_final.pth.tar\n","Loading model Done. Time: 1.095 sec\n","Loading feature database...\n","Loading feature database Done. Time: 0.169 sec\n","Extracting image feature...\n","Extracting image feature Done. Time: 60.002 sec\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-8355162bd810>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# print(f)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mif\u001b[0m \u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Input feature is None\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'NoneType' object is not iterable"]}]},{"cell_type":"code","metadata":{"id":"fhJO0HLXumMm","colab_type":"code","colab":{}},"source":["from in_shop_eval import eval\n","results = []\n","\n","for n in range(2, 52):\n","  results.append(eval(retrieval_top_n=n))\n","  print(results)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qwc1Ybhq_G0o","colab_type":"code","colab":{}},"source":["from matplotlib import pyplot as plt\n","import numpy as np\n","\n","results = [0.6134105960264901, 0.7210264900662252, 0.7644867549668874, 0.8021523178807947, 0.831953642384106, 0.831953642384106, 0.8547185430463576, 0.8621688741721855, 0.8774834437086093, 0.8774834437086093, 0.8820364238410596, 0.894453642384106, 0.8990066225165563, 0.9027317880794702, 0.9048013245033113, 0.9122516556291391, 0.9097682119205298, 0.9151490066225165, 0.9234271523178808, 0.9184602649006622, 0.921771523178808, 0.9275662251655629, 0.9230132450331126, 0.9350165562913907, 0.9366721854304636, 0.9387417218543046, 0.9350165562913907, 0.9445364238410596, 0.9379139072847682, 0.9354304635761589, 0.9395695364238411, 0.9503311258278145, 0.9424668874172185, 0.9445364238410596, 0.9457781456953642, 0.9441225165562914, 0.9548841059602649, 0.9486754966887417, 0.9486754966887417, 0.9470198675496688, 0.9441225165562914, 0.953228476821192, 0.9482615894039735, 0.9552980132450332, 0.9511589403973509, 0.9606788079470199, 0.9552980132450332, 0.9552980132450332, 0.9507450331125827, 0.9627483443708609]\n","plt.plot(np.linspace(1,50), results)\n","plt.xlabel('Retrieved images (k=1,...,50)')\n","plt.ylabel('Retrieval Accuracy')\n","# plt.savefig('retrieval_test')"],"execution_count":0,"outputs":[]}]}